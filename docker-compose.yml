services:
  database:
    image: postgres:latest
    container_name: film-database
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_NAME: ${DB_NAME}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker-entrypoint-initdb.d:/docker-entrypoint-initdb.d
    ports:
      - 5432:5432
    networks:
      - backend-network

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    image: 'ghcr.io/${OWNER}/film-backend:v1.0.0'
    container_name: film-backend
    restart: always
    environment:
      DB_ADDRESS: ${DB_ADDRESS}
      VITE_API_URL: ${VITE_API_URL}
      VITE_CDN_URL: ${VITE_CDN_URL}
    ports:
      - 3001:3000
    networks:
      - backend-network
    depends_on:
      - database

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    image: 'ghcr.io/${OWNER}/film-frontend:v1.0.0'
    container_name: film-frontend
    environment:
      VITE_API_URL: ${VITE_API_URL}
      VITE_CDN_URL: ${VITE_CDN_URL}
    volumes:
      - frontend_dist:/app/dist
    networks:
      - frontend-network

  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    image: 'ghcr.io/${OWNER}/film-nginx:v1.0.0'
    container_name: film-nginx
    restart: always
    environment:
      VITE_API_URL: ${VITE_API_URL}
      VITE_CDN_URL: ${VITE_CDN_URL}
    volumes:
      - frontend_dist:/var/www
      - ./backend/public:/var/www/backend
    ports:
      - 81:80
    networks:
      - frontend-network
      - backend-network

volumes:
  postgres_data:
  frontend_dist:

networks:
  backend-network:
  frontend-network:



# services:
#   database:
#     image: mongo:latest
#     container_name: database
#     environment:
#       MONGO_INITDB_ROOT_USERNAME: root
#       MONGO_INITDB_ROOT_PASSWORD: rootpassword
#       MONGO_INITDB_DATABASE: admin
#     restart: always
#     volumes:
#       - mongo_data:/data/db
#       - ./backend/test/mongodb_initial_stub.json:/docker-entrypoint-initdb.d/mongodb_initial_stub.json
#       - ./docker-entrypoint-initdb.d/mongo-init.sh:/docker-entrypoint-initdb.d/mongo-init.sh
#     ports:
#       - 27017:27017
#     networks:
#       - backend-network

#   backend:
#     build:
#       context: ./backend
#       dockerfile: Dockerfile
#     container_name: backend
#     env_file:
#       - backend/.env
#     ports:
#       - 3001:3000
#     networks:
#       - backend-network
#     depends_on:
#       - database

#   frontend:
#     build:
#       context: ./frontend
#       dockerfile: Dockerfile
#     container_name: frontend
#     volumes:
#       - frontend_dist:/app/dist
#     networks:
#       - frontend-network

#   nginx:
#     image: nginx:latest
#     container_name: nginx
#     ports:
#       - 80:80
#     networks:
#       - frontend-network
#       - backend-network
#     restart: always
#     volumes:
#       - frontend_dist:/var/www
#       - ./nginx.conf:/etc/nginx/conf.d/default.conf
#       - ./backend/public:/var/www/backend

# volumes:
#   mongo_data:
#   frontend_dist:

# networks:
#   backend-network:
#   frontend-network:
